@page "/login"
@using Application.RequestModels.User.LoginCommand
@implements IDisposable

<div class="login-container">
    <div class="background-shapes">
        <div class="shape shape-1"></div>
        <div class="shape shape-2"></div>
        <div class="shape shape-3"></div>
    </div>

    <div class="login-card">
        <div class="login-header">
            <div class="login-logo">
                <div class="logo-icon">
                    <svg width="48" height="48" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M12 2C13.1 2 14 2.9 14 4C14 5.1 13.1 6 12 6C10.9 6 10 5.1 10 4C10 2.9 10.9 2 12 2ZM21 9V7L15 7.5L12.5 5L9.5 7L3 6.5V9H21ZM12 10.5C10.07 10.5 8.5 12.07 8.5 14S10.07 17.5 12 17.5S15.5 15.93 15.5 14S13.93 10.5 12 10.5ZM19 22H5C4.45 22 4 21.55 4 21V20C4 18.35 5.35 17 7 17H8.5C9.61 17 10.5 16.11 10.5 15H13.5C13.5 16.11 14.39 17 15.5 17H17C18.65 17 20 18.35 20 20V21C20 21.55 19.55 22 19 22Z" fill="currentColor" />
                    </svg>
                </div>
                <h1>MindCare</h1>
            </div>
            <h2>Güvenli Giriş</h2>
            <p class="subtitle">Size yardımcı olmak için buradayız</p>
        </div>

        @if (identityService?.IsLoggedIn == false)
        {
            <!-- Kullanıcı henüz giriş yapmamışsa yapılacak işlemler -->
        }

        <EditForm Model="@loginUserCommand" OnValidSubmit="LoginProcess" class="login-form">
            <DataAnnotationsValidator />

            <div class="form-group">
                <label for="username" class="form-label">
                    <span class="label-icon">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none">
                            <path d="M12 12C14.21 12 16 10.21 16 8C16 5.79 14.21 4 12 4C9.79 4 8 5.79 8 8C8 10.21 9.79 12 12 12ZM12 14C9.33 14 4 15.34 4 18V20H20V18C20 15.34 14.67 14 12 14Z" fill="currentColor" />
                        </svg>
                    </span>
                    E-posta Adresiniz
                </label>
                <div class="input-wrapper">
                    <InputText id="username" class="form-control" @bind-Value="loginUserCommand.Email" placeholder="ornek@email.com" />
                    <ValidationMessage For="@(() => loginUserCommand.Email)" class="validation-message" />
                </div>
            </div>

            <div class="form-group">
                <label for="password" class="form-label">
                    <span class="label-icon">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none">
                            <path d="M18 8H17V6C17 3.24 14.76 1 12 1S7 3.24 7 6V8H6C4.9 8 4 8.9 4 10V20C4 21.1 4.9 22 6 22H18C19.1 22 20 21.1 20 20V10C20 8.9 19.1 8 18 8ZM12 17C10.9 17 10 16.1 10 15S10.9 13 12 13S14 13.9 14 15S13.1 17 12 17ZM15.1 8H8.9V6C8.9 4.29 10.29 2.9 12 2.9S15.1 4.29 15.1 6V8Z" fill="currentColor" />
                        </svg>
                    </span>
                    Şifreniz
                </label>
                <div class="input-wrapper">
                    <InputText id="password" type="password" class="form-control" @bind-Value="loginUserCommand.PasswordHash" placeholder="••••••••" />
                    <ValidationMessage For="@(() => loginUserCommand.PasswordHash)" class="validation-message" />
                </div>
            </div>

            @if (!string.IsNullOrEmpty(ErrorText))
            {
                <div class="alert alert-danger">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none">
                        <path d="M12 2C6.48 2 2 6.48 2 12S6.48 22 12 22S22 17.52 22 12S17.52 2 12 2ZM13 17H11V15H13V17ZM13 13H11V7H13V13Z" fill="currentColor" />
                    </svg>
                    @ErrorText
                </div>
            }

            <ValidationSummary class="validation-summary" />

            <button type="submit" class="btn btn-primary">
                <span class="btn-content">
                    <svg width="18" height="18" viewBox="0 0 24 24" fill="none">
                        <path d="M10 17L15 12L10 7V10H2V14H10V17Z" fill="currentColor" />
                    </svg>
                    Giriş Yap
                </span>
            </button>
        </EditForm>

        <div class="login-footer">
            <div class="footer-links">
                <a href="/register" class="link-primary">
                    <svg width="14" height="14" viewBox="0 0 24 24" fill="none">
                        <path d="M12 2C13.1 2 14 2.9 14 4C14 5.1 13.1 6 12 6C10.9 6 10 5.1 10 4C10 2.9 10.9 2 12 2ZM21 9V7L15 7.5L12.5 5L9.5 7L3 6.5V9H21ZM12 10.5C10.07 10.5 8.5 12.07 8.5 14S10.07 17.5 12 17.5S15.5 15.93 15.5 14S13.93 10.5 12 10.5Z" fill="currentColor" />
                    </svg>
                    Yeni Hesap Oluştur
                </a>
                <a href="/forgot-password" class="link-secondary">
                    <svg width="14" height="14" viewBox="0 0 24 24" fill="none">
                        <path d="M12 2C6.48 2 2 6.48 2 12S6.48 22 12 22C13.03 22 14.01 21.82 14.92 21.5L13.65 20.23C13.12 20.41 12.57 20.5 12 20.5C7.31 20.5 3.5 16.69 3.5 12S7.31 3.5 12 3.5S20.5 7.31 20.5 12C20.5 12.31 20.47 12.61 20.43 12.9L21.93 14.4C21.97 13.94 22 13.47 22 13C22 6.48 17.52 2 12 2ZM18 14L16 12H14V14H16L18 16L20 14H18Z" fill="currentColor" />
                    </svg>
                    Şifremi Unuttum
                </a>
            </div>
            <div class="footer-text">
                <p>Güvenli ve gizli bir ortamda size destek olmaktan mutluluk duyuyoruz.</p>
            </div>
        </div>
    </div>
</div>

@code {
    [Inject] private IidentityService? identityService { get; set; }
    [Inject] private NavigationManager navigationManager { get; set; } = null!;
    private string ErrorText = "";
    private LoginUserCommand loginUserCommand = new();
    private bool _disposed;

    protected async override void OnInitialized()
    {
        await Task.Delay(10);
        if (identityService == null)
            throw new InvalidOperationException("identityService must be injected");
        navigationManager.LocationChanged += HandleLocationChanged;
    }

    private void HandleLocationChanged(object? sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        _disposed = true;
    }

    public async Task LoginProcess()
    {
        if (_disposed || identityService == null) return;
        try
        {
            var res = await identityService.Login(loginUserCommand);
            if (_disposed) return;
            if (res)
            {
                navigationManager.NavigateTo("/");
                return;
            }
            else
            {
                ErrorText = "E-posta veya şifre hatalı. Lütfen tekrar deneyin.";
                await InvokeAsync(StateHasChanged);
            }
        }
        catch (Exception ex)
        {
            if (_disposed) return;
            ErrorText = "Giriş sırasında bir hata oluştu. Lütfen daha sonra tekrar deneyin.";
            await InvokeAsync(StateHasChanged);
        }
    }

    public void Dispose()
    {
        _disposed = true;
        navigationManager.LocationChanged -= HandleLocationChanged;
        if (identityService is IDisposable disposable)
        {
            disposable.Dispose();
        }
    }
}

