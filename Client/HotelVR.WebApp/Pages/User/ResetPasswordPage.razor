@page "/reset-password/{token}"
@page "/reset-password"
@using System.ComponentModel.DataAnnotations
@using Application.Queries.ResetPassword
@inject IUserService UserService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation



<div class="reset-password-container">
    <div class="reset-background-shapes">
        <div class="reset-shape reset-shape-1"></div>
        <div class="reset-shape reset-shape-2"></div>
        <div class="reset-shape reset-shape-3"></div>
    </div>

    <div class="reset-password-card">
        <div class="reset-password-header">
            <div class="reset-password-logo">
                <div class="reset-logo-icon">
                    <svg width="32" height="32" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M12 1L3 5V11C3 16.55 6.84 21.74 12 23C17.16 21.74 21 16.55 21 11V5L12 1M12 7C13.11 7 14 7.89 14 9C14 10.11 13.11 11 12 11C10.89 11 10 10.11 10 9C10 7.89 10.89 7 12 7M18 15C16.67 15 15.67 14.33 15 13.5C14.33 14.33 13.33 15 12 15C10.67 15 9.67 14.33 9 13.5C8.33 14.33 7.33 15 6 15V17C6 17.55 6.45 18 7 18H17C17.55 18 18 17.55 18 17V15Z" />
                    </svg>
                </div>
                <h1>Sistem</h1>
            </div>
            <h2>Şifre Sıfırla</h2>
            <p class="reset-subtitle">Yeni şifrenizi belirleyin</p>
        </div>

        <EditForm Model="resetPasswordModel" OnValidSubmit="HandleResetPassword" class="reset-password-form">
            <DataAnnotationsValidator />

            <div class="reset-form-group">
                <label class="reset-form-label">
                    <span class="reset-label-icon">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M12,17A2,2 0 0,0 14,15C14,13.89 13.1,13 12,13A2,2 0 0,0 10,15A2,2 0 0,0 12,17M18,8A2,2 0 0,1 20,10V20A2,2 0 0,1 18,22H6A2,2 0 0,1 4,20V10C4,8.89 4.9,8 6,8H7V6A5,5 0 0,1 12,1A5,5 0 0,1 17,6V8H18M12,3A3,3 0 0,0 9,6V8H15V6A3,3 0 0,0 12,3Z" />
                        </svg>
                    </span>
                    Yeni Şifre
                </label>
                <div class="reset-input-wrapper">
                    <InputText @bind-Value="resetPasswordModel.NewPassword"
                               type="password"
                               class="reset-form-control"
                               placeholder="Yeni şifrenizi girin" />
                </div>
                <ValidationMessage For="() => resetPasswordModel.NewPassword" class="reset-validation-message" />
            </div>

            <div class="reset-form-group">
                <label class="reset-form-label">
                    <span class="reset-label-icon">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M12,17A2,2 0 0,0 14,15C14,13.89 13.1,13 12,13A2,2 0 0,0 10,15A2,2 0 0,0 12,17M18,8A2,2 0 0,1 20,10V20A2,2 0 0,1 18,22H6A2,2 0 0,1 4,20V10C4,8.89 4.9,8 6,8H7V6A5,5 0 0,1 12,1A5,5 0 0,1 17,6V8H18M12,3A3,3 0 0,0 9,6V8H15V6A3,3 0 0,0 12,3Z" />
                        </svg>
                    </span>
                    Şifre Tekrar
                </label>
                <div class="reset-input-wrapper">
                    <InputText @bind-Value="confirmPassword"
                               type="password"
                               class="reset-form-control"
                               placeholder="Şifrenizi tekrar girin" />
                </div>
                @if (!string.IsNullOrEmpty(confirmPasswordError))
                {
                    <div class="reset-validation-message">@confirmPasswordError</div>
                }
            </div>

            <button type="submit" class="reset-btn reset-btn-primary" disabled="@isProcessing">
                <div class="reset-btn-content">
                    @if (isProcessing)
                    {
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor" class="reset-spinner">
                            <path d="M12,4V2A10,10 0 0,0 2,12H4A8,8 0 0,1 12,4Z" />
                        </svg>
                        <span>İşleniyor...</span>
                    }
                    else
                    {
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z" />
                        </svg>
                        <span>Şifreyi Sıfırla</span>
                    }
                </div>
            </button>
        </EditForm>

        @if (!string.IsNullOrEmpty(message))
        {
            <div class="reset-alert @(isSuccess ? "reset-alert-success" : "reset-alert-danger")">
                @if (isSuccess)
                {
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z" />
                    </svg>
                }
                else
                {
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M13,13H11V7H13M13,17H11V15H13M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2Z" />
                    </svg>
                }
                @message
            </div>
        }

        <div class="reset-password-footer">
            <div class="reset-footer-links">
                <a href="/login" class="reset-link-secondary">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M20,11V13H8L13.5,18.5L12.08,19.92L4.16,12L12.08,4.08L13.5,5.5L8,11H20Z" />
                    </svg>
                    Giriş Sayfasına Dön
                </a>
            </div>
        </div>
    </div>
</div>



@code {
    [Parameter] public string Token { get; set; } = string.Empty;

    private ResetPasswordCommand resetPasswordModel = new();
    private string confirmPassword = string.Empty;
    private string confirmPasswordError = string.Empty;

    private bool isProcessing = false;
    private string message = string.Empty;
    private bool isSuccess = false;

    protected override void OnInitialized()
    {
        // İlk önce route parameter'dan token'ı al
        if (!string.IsNullOrEmpty(Token))
        {
            resetPasswordModel.Token = Token;
        }
        else
        {
            // Route parameter yoksa query string'den al
            var uri = new Uri(Navigation.Uri);
            var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
            var tokenFromQuery = query["token"];

            if (!string.IsNullOrEmpty(tokenFromQuery))
            {
                resetPasswordModel.Token = tokenFromQuery;
                Token = tokenFromQuery; // Parameter'ı da set et
            }
        }
    }

    private async Task HandleResetPassword()
    {
        // Clear previous errors
        confirmPasswordError = string.Empty;

        // Client-side validation için şifre eşleşme kontrolü
        if (resetPasswordModel.NewPassword != confirmPassword)
        {
            confirmPasswordError = "Şifreler eşleşmiyor.";
            return;
        }

        isProcessing = true;
        message = string.Empty;

        try
        {
            // Token'ı tekrar set et
            resetPasswordModel.Token = Token;

            var response = await UserService.ResetPasswordAsync(resetPasswordModel);

            if (response.Succeeded) // Result.Success kullanıyoruz
            {
                message = "Şifreniz başarıyla sıfırlandı. Giriş sayfasına yönlendiriliyorsunuz...";
                isSuccess = true;

                // 2 saniye sonra giriş sayfasına yönlendir
                await Task.Delay(2000);
                Navigation.NavigateTo("/login");
            }
            else
            {
                message = response.Message ?? "Şifre sıfırlama işlemi başarısız. Token geçersiz veya süresi dolmuş olabilir.";
                isSuccess = false;
            }
        }
        catch (Exception ex)
        {
            message = "Bir hata oluştu. Lütfen tekrar deneyin.";
            isSuccess = false;
        }
        finally
        {
            isProcessing = false;
        }
    }

    // Mevcut ResetPasswordCommand modelinizi kullanıyor
}