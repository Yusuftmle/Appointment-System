@page "/blog/{Slug}"
@inject IBlogPostService BlogService
@inject NavigationManager Nav
@inject IJSRuntime JSRuntime
@using MudBlazor
@using Application.Models
@using Application.Queries.Blog
@using System.Text.RegularExpressions

<!-- Page Title with Breadcrumbs -->
<div class="page-title bg-gradient-primary py-4">
    <div class="container">
        <div class="breadcrumb-nav">
            @if (blog is not null)
            {
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb mb-0">
                        <li class="breadcrumb-item"><a href="/">Anasayfa</a></li>
                        <li class="breadcrumb-item"><a href="/blog">Blog</a></li>
                        <li class="breadcrumb-item active" aria-current="page">@blog.Title</li>
                    </ol>
                </nav>
            }
        </div>
    </div>
</div>

<div class="container py-4 py-lg-5">
    @if (blog is null)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Yükleniyor...</span>
            </div>
            <p class="mt-3 text-muted">Blog yazısı yükleniyor...</p>
        </div>
    }
    else
    {
        <div class="row gx-lg-5">
            <!-- Sol Sidebar - Son Yazılar -->
            <aside class="col-lg-2 d-none d-lg-block order-lg-1 pe-lg-4">
                <div class="sticky-sidebar">
                    <div class="card border-0 shadow-sm rounded-3 p-3 mb-4">
                        <h6 class="fw-bold text-primary mb-3">
                            <i class="bi bi-clock-history me-2"></i>Son Yazılar
                        </h6>
                        @if (lastPosts?.Any() == true)
                        {
                            <ul class="list-unstyled">
                                @foreach (var post in lastPosts)
                                {
                                    <li class="mb-3">
                                        <a @onclick="() => NavigateToPost(post.Slug)"
                                           class="text-decoration-none d-block cursor-pointer recent-post-link">
                                            <div class="d-flex align-items-start">
                                                <i class="bi bi-arrow-right-short text-primary me-2 mt-1"></i>
                                                <div class="flex-grow-1">
                                                    <span class="text-dark fw-medium small">@post.Title</span>
                                                    <small class="text-muted d-block mt-1">
                                                        @post.CreatedAt.ToString("dd MMM yyyy")
                                                    </small>
                                                    @if (post.TagNames?.Any() == true)
                                                    {
                                                        <span class="badge bg-secondary bg-opacity-10 text-secondary mt-1 small">
                                                            @post.TagNames.First()
                                                        </span>
                                                    }
                                                </div>
                                            </div>
                                        </a>
                                    </li>
                                }
                            </ul>
                        }
                        else
                        {
                            <p class="text-muted small">Henüz başka yazı bulunmuyor.</p>
                        }
                    </div>
                </div>
            </aside>

            <!-- Ana İçerik -->
            <main class="col-lg-7 order-lg-2">
                <article class="card border-0 shadow-sm rounded-3 overflow-hidden">
                    <!-- Kapak Görseli -->
                    <div class="position-relative">
                        <img src="@blog.CoverImageUrl" alt="@blog.Title"
                             class="img-fluid w-100 blog-cover-image" />
                        <div class="position-absolute bottom-0 start-0 end-0 bg-gradient-overlay p-4">
                            <div class="mb-2">
                                <span class="badge bg-primary rounded-pill px-3 py-2">@blog.BlogTagName</span>
                            </div>
                        </div>
                    </div>

                    <div class="p-4 p-lg-5">
                        <!-- Başlık ve Meta Bilgiler -->
                        <header class="mb-4 pb-3 border-bottom">
                            <h1 class="fw-bold display-6 mb-3 text-dark">@blog.Title</h1>
                            <div class="d-flex flex-wrap align-items-center gap-3 text-muted mb-3">
                                <span class="d-flex align-items-center">
                                    <i class="bi bi-calendar3 me-2"></i>
                                    @blog.CreatedAt.ToString("dd MMMM yyyy")
                                </span>
                                <span class="d-flex align-items-center">
                                    <i class="bi bi-clock me-2"></i>
                                    @CalculateReadTime(blog.Content) dakika okuma
                                </span>
                                <span class="d-flex align-items-center">
                                    <i class="bi bi-eye me-2"></i>
                                    Okunma süresi
                                </span>
                            </div>
                        </header>

                        <!-- Özet -->
                        @if (!string.IsNullOrWhiteSpace(blog.Summary))
                        {
                            <div class="alert alert-info border-0 rounded-3 mb-4">
                                <div class="d-flex">
                                    <i class="bi bi-info-circle-fill text-info me-3 mt-1"></i>
                                    <div class="lead mb-0">@blog.Summary</div>
                                </div>
                            </div>
                        }

                        <!-- İçerik -->
                        <div class="blog-content mb-5" @ref="contentDiv">
                            @((MarkupString)blog.Content)
                        </div>

                        <!-- Keywords -->
                        @if (!string.IsNullOrWhiteSpace(blog.Keywords))
                        {
                            <div class="mt-4 pt-3 border-top">
                                <h6 class="fw-bold mb-3 text-primary">
                                    <i class="bi bi-tags me-2"></i>İlgili Etiketler
                                </h6>
                                <div class="d-flex flex-wrap gap-2">
                                    @foreach (var keyword in blog.Keywords.Split(',', StringSplitOptions.RemoveEmptyEntries))
                                    {
                                        <span class="badge bg-light text-dark border rounded-pill px-3 py-2">
                                            #@keyword.Trim()
                                        </span>
                                    }
                                </div>
                            </div>
                        }

                        <!-- Yazar Bilgisi -->
                        <div class="author-card mt-5 p-4 bg-light rounded-3">
                            <div class="d-flex align-items-center">
                                <img src="/images/default-avatar.png" alt="@blog.Author"
                                     class="rounded-circle me-3 border border-2 border-white shadow-sm"
                                     width="64" height="64" />
                                <div>
                                    <h6 class="fw-bold mb-1 text-dark">@blog.Author</h6>
                                    <p class="text-muted mb-0 small">Yazar</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </article>
            </main>

            <!-- Sağ Sidebar - İçindekiler ve Paylaşım -->
            <aside class="col-lg-3 order-lg-3 ps-lg-4">
                <div class="sticky-sidebar">
                    <!-- İçindekiler -->
                    @if (tocHeadings?.Any() == true)
                    {
                        <div class="card border-0 shadow-sm rounded-3 p-3 mb-4">
                            <h6 class="fw-bold text-primary mb-3">
                                <i class="bi bi-list-ul me-2"></i>İçindekiler
                            </h6>
                            <nav class="toc-nav">
                                <ul class="list-unstyled">
                                    @foreach (var heading in tocHeadings)
                                    {
                                        <li class="@(heading.Level == 2 ? "mb-2" : "ms-3 mb-1")">
                                            <a href="#@heading.Id"
                                               class="toc-link @(heading.Level == 2 ? "fw-semibold" : "small text-muted")"
                                               @onclick="() => ScrollToHeading(heading.Id)"
                                               @onclick:preventDefault="true">
                                                @heading.Text
                                            </a>
                                        </li>
                                    }
                                </ul>
                            </nav>
                        </div>
                    }

                    <!-- Paylaşım Butonları -->
                    <div class="card border-0 shadow-sm rounded-3 p-3">
                        <h6 class="fw-bold text-primary mb-3">
                            <i class="bi bi-share me-2"></i>Paylaş
                        </h6>
                        <div class="d-grid gap-2">
                            <button @onclick="ShareOnFacebook"
                                    class="btn btn-outline-primary btn-sm rounded-pill d-flex align-items-center justify-content-center">
                                <i class="bi bi-facebook me-2"></i> Facebook
                            </button>
                            <button @onclick="ShareOnTwitter"
                                    class="btn btn-outline-info btn-sm rounded-pill d-flex align-items-center justify-content-center">
                                <i class="bi bi-twitter me-2"></i> Twitter
                            </button>
                            <button @onclick="ShareOnWhatsApp"
                                    class="btn btn-outline-success btn-sm rounded-pill d-flex align-items-center justify-content-center">
                                <i class="bi bi-whatsapp me-2"></i> WhatsApp
                            </button>
                            <button @onclick="CopyLink"
                                    class="btn btn-outline-secondary btn-sm rounded-pill d-flex align-items-center justify-content-center">
                                <i class="bi bi-link-45deg me-2"></i>
                                @(linkCopied ? "Kopyalandı!" : "Linki Kopyala")
                            </button>
                        </div>
                    </div>
                </div>
            </aside>
        </div>
    }
</div>



@code {
    private BlogPostDto? blog;
    private List<BlogPostListItemDto> lastPosts = new();
    private ElementReference contentDiv;
    private List<TocHeading> tocHeadings = new();
    private bool linkCopied = false;

    [Parameter] public string Slug { get; set; } = string.Empty;

    // TOC Heading modeli
    private class TocHeading
    {
        public string Id { get; set; } = $"section-{Guid.NewGuid():N}";
        public string Text { get; set; } = string.Empty;
        public int Level { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrWhiteSpace(Slug))
        {
            try
            {
                blog = await BlogService.GetBySlugAsync(Slug);
                lastPosts = await BlogService.GetLastPostAsync() ?? new List<BlogPostListItemDto>();
            }
            catch (Exception ex)
            {
                // Log error
                Console.WriteLine($"Error loading blog post: {ex.Message}");
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && blog != null)
        {
            try
            {
                // Set page meta
                var description = blog.Summary?.Length > 160
                    ? blog.Summary.Substring(0, 160)
                    : blog.Summary ?? "";

                await JSRuntime.InvokeVoidAsync("setPageMeta",
                    $"{blog.Title} | HotelVR",
                    description);

                // Generate TOC
                await GenerateTOC();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error in OnAfterRenderAsync: {ex.Message}");
            }
        }
    }

    private void NavigateToPost(string slug)
    {
        if (!string.IsNullOrWhiteSpace(slug))
        {
            Nav.NavigateTo($"/blog/{slug}");
        }
    }

    // İçindekiler tablosu oluşturma
    private async Task GenerateTOC()
    {
        if (blog == null || string.IsNullOrWhiteSpace(blog.Content))
            return;

        try
        {
            tocHeadings.Clear();

            var matches = Regex.Matches(
                blog.Content,
                @"<h([2-4])[^>]*>(.*?)<\/h[2-4]>",
                RegexOptions.IgnoreCase
            );

            foreach (Match match in matches)
            {
                var level = int.Parse(match.Groups[1].Value);
                var text = System.Net.WebUtility.HtmlDecode(
                    Regex.Replace(match.Groups[2].Value, "<[^>]*>", "")
                ).Trim();

                if (!string.IsNullOrWhiteSpace(text))
                {
                    var heading = new TocHeading
                        {
                            Level = level,
                            Text = text,
                            Id = $"heading-{tocHeadings.Count + 1}"
                        };

                    tocHeadings.Add(heading);
                }
            }

            StateHasChanged();

            // Add IDs to headings in content
            if (tocHeadings.Any())
            {
                await AddIdsToHeadings();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error generating TOC: {ex.Message}");
        }
    }

    private async Task AddIdsToHeadings()
    {
        try
        {
            for (int i = 0; i < tocHeadings.Count; i++)
            {
                await JSRuntime.InvokeVoidAsync("addIdToHeading", i, tocHeadings[i].Id);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding IDs to headings: {ex.Message}");
        }
    }

    // Başlığa scroll etme
    private async Task ScrollToHeading(string id)
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("scrollToElement", id);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error scrolling to heading: {ex.Message}");
        }
    }

    // Paylaşım fonksiyonları
    private void ShareOnFacebook()
    {
        var url = Uri.EscapeDataString(Nav.Uri);
        Nav.NavigateTo($"https://www.facebook.com/sharer/sharer.php?u={url}", forceLoad: true);
    }

    private void ShareOnTwitter()
    {
        var url = Uri.EscapeDataString(Nav.Uri);
        var text = Uri.EscapeDataString(blog?.Title ?? "");
        Nav.NavigateTo($"https://twitter.com/intent/tweet?text={text}&url={url}", forceLoad: true);
    }

    private void ShareOnWhatsApp()
    {
        var message = Uri.EscapeDataString($"{blog?.Title} {Nav.Uri}");
        Nav.NavigateTo($"https://wa.me/?text={message}", forceLoad: true);
    }

    private async Task CopyLink()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", Nav.Uri);
            linkCopied = true;
            StateHasChanged();

            // Reset after 2 seconds
            await Task.Delay(2000);
            linkCopied = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error copying link: {ex.Message}");
        }
    }

    // Okuma süresi hesaplama
    private int CalculateReadTime(string content)
    {
        if (string.IsNullOrWhiteSpace(content))
            return 1;

        try
        {
            var plainText = Regex.Replace(content, "<[^>]*>", " ");
            var wordCount = plainText.Split(new[] { ' ', '\t', '\n', '\r' },
                StringSplitOptions.RemoveEmptyEntries).Length;
            return Math.Max(1, (int)Math.Ceiling(wordCount / 200.0));
        }
        catch
        {
            return 1;
        }
    }
}